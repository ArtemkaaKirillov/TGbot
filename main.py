import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware

logging.basicConfig(level=logging.INFO)

API_TOKEN = '6657590037:AAH4nYyRYskgnUUR8phgtobMMAQ38lPCxCY'

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    item1 = types.InlineKeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–µ–∫—Ç üßæ", callback_data="—Ä–∞—Å—á—ë—Ç")
    markup.add(item1)

    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ  üñê\n–Ø —á–∞—Ç-–±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ ARTEX\n–ü–æ–º–æ–≥—É –≤–∞–º —Ä–∞—Å—â–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–π—Ç–∞ üìù\n–î–ª—è —ç—Ç–æ–≥–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è", reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == "—Ä–∞—Å—á—ë—Ç")
async def process_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, text="–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–µ–∫—Ç üßæ")
    markup = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton("–°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–æ–≤ üóí", callback_data="—Å–æ–∑–¥–∞–Ω–∏–µ_—Å–∞–π—Ç–æ–≤")
    item2 = types.InlineKeyboardButton("–†–µ–∫–ª–∞–º–∞ üì¢", callback_data="—Ä–µ–∫–ª–∞–º–∞")
    item3 = types.InlineKeyboardButton("–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ üìà", callback_data="–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ")
    item4 = types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é üí¨", callback_data="–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")
    markup.add(item1, item2, item3, item4)

    await bot.send_message(chat_id=callback_query.message.chat.id,
                           text="–ö–∞–∫—É—é –∑–∞–¥–∞—á—É –Ω—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å ?üìù",
                           reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == "—Å–æ–∑–¥–∞–Ω–∏–µ_—Å–∞–π—Ç–æ–≤")
async def process_button2(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, text="–°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π—Ç–æ–≤ üóí")
    markup = types.InlineKeyboardMarkup(row_width=2)
    item1 = types.InlineKeyboardButton("–õ–µ–Ω–¥–∏–Ω–≥ üìÉ", callback_data="–ª–µ–Ω–¥–∏–Ω–≥")
    item2 = types.InlineKeyboardButton("–ë–∏–∑–Ω–µ—Å —Å–∞–π—Ç üíº", callback_data="–±–∏–∑–Ω–µ—Å_—Å–∞–π—Ç")
    item3 = types.InlineKeyboardButton("–ò–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω üõí", callback_data="–∏–Ω—Ç–µ—Ä–Ω–µ—Ç_–º–∞–≥–∞–∑–∏–Ω")
    markup.add(item1, item2)
    markup.add(item3)
    await bot.send_message(chat_id=callback_query.message.chat.id,
                           text="–ß—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ ? üìç",
                           reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == "–ª–µ–Ω–¥–∏–Ω–≥")
async def process_button3(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, text="–õ–µ–Ω–¥–∏–Ω–≥ üìÉ")
    markup = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton("–ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–∞ ü§ù", callback_data="–ø—Ä–æ–¥–∞–∂–∞_—Ç–æ–≤–∞—Ä–∞")
    item2 = types.InlineKeyboardButton("–°–±–æ—Ä –ª–∏–¥–æ–≤ üìä", callback_data="—Å–±–æ—Ä_–ª–∏–¥–æ–≤", url='https://andreykirillov.art/kontakty/')
    item3 = types.InlineKeyboardButton("–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ üéü", callback_data="–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ_–Ω–∞_—Å–æ–±—ã—Ç–∏–µ", url='https://andreykirillov.art/kontakty/')
    item4 = types.InlineKeyboardButton("–î—Ä—É–≥–æ–µ... üì¶", callback_data="–¥—Ä—É–≥–æ–µ", url='https://andreykirillov.art/kontakty/')
    markup.add(item1, item2, item3, item4)
    await bot.send_message(chat_id=callback_query.message.chat.id,
                           text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É ‚¨áÔ∏è",
                           reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == "–ø—Ä–æ–¥–∞–∂–∞_—Ç–æ–≤–∞—Ä–∞")
async def process_button4(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, text="–ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–∞ ü§ù")
    markup = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton("–î–∞ ‚úÖ", callback_data="–¥–∞")
    item2 = types.InlineKeyboardButton("–ù–µ—Ç ‚ùå", callback_data="–Ω–µ—Ç")
    markup.add(item1, item2)
    await bot.send_message(chat_id=callback_query.message.chat.id,
                           text="–£ –≤–∞—Å  —É–∂–µ –µ—Å—Ç—å –¥–∏–∑–∞–π–Ω, –º–∞–∫–µ—Ç,  –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç ? üìù",
                           reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == "–Ω–µ—Ç")
async def process_button5(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, text="–ù–µ—Ç ‚ùå")
    markup = types.InlineKeyboardMarkup(row_width=2)
    item1 = types.InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å –¥–∏–∑–∞–π–Ω üé®", callback_data="–∑–∞–∫–∞–∑–∞—Ç—å_–¥–∏–∑–∞–π–Ω", url='https://andreykirillov.art/kontakty/')
    item2 = types.InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–ø–µ—Ä–∞–π—Ç–∏–Ω–≥ üíª", callback_data="–∑–∞–∫–∞–∑–∞—Ç—å_–∫–æ–ø–µ—Ä–∞–π—Ç", url='https://andreykirillov.art/kontakty/')
    item3 = types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é üë®üèª‚Äçüíª", callback_data="–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ", url='https://andreykirillov.art/kontakty/')
    markup.add(item1, item2)
    markup.add(item3)
    await bot.send_message(chat_id=callback_query.message.chat.id,
                           text="–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç—É –¥–∏–∑–∞–π–Ω–∞, –º–∞–∫–µ—Ç–∞, —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏  –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Å–¥–µ—Å—å  ‚¨áÔ∏è",
                           reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == "–±–∏–∑–Ω–µ—Å_—Å–∞–π—Ç")
async def process_button6(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, text="–ë–∏–∑–Ω–µ—Å —Å–∞–π—Ç üíº")
    markup = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton("–ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–æ–≤ ü§ù", callback_data="–ü—Ä–æ–¥–∞–∂–∞–¢–æ–≤–∞—Ä–æ–≤")
    item2 = types.InlineKeyboardButton("–°–±–æ—Ä –ª–∏–¥–æ–≤ üìä", callback_data="—Å–±–æ—Ä_–ª–∏–¥–æ–≤", url='https://andreykirillov.art/kontakty/')
    item3 = types.InlineKeyboardButton("–î—Ä—É–≥–æ–µ... üì¶", callback_data="–¥—Ä—É–≥–æ–µ_2", url='https://andreykirillov.art/kontakty/')
    markup.add(item1, item2, item3)

    await bot.send_message(chat_id=callback_query.message.chat.id,
                           text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É ‚¨áÔ∏è",
                           reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == "–ü—Ä–æ–¥–∞–∂–∞–¢–æ–≤–∞—Ä–æ–≤")
async def process_button7(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, text="–ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–æ–≤ ü§ù")
    markup = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton("–î–∞ ‚úÖ", callback_data="–¥–∞_2")
    item2 = types.InlineKeyboardButton("–ù–µ—Ç ‚ùå", callback_data="–Ω–µ—Ç_2")
    markup.add(item1, item2)

    await bot.send_message(chat_id=callback_query.message.chat.id,
                           text="–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–∏–∑–∞–π–Ω, –º–∞–∫–µ—Ç,  –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç ? üìù",
                           reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == "–Ω–µ—Ç_2")
async def process_button8(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, text="–ù–µ—Ç ‚ùå")
    markup = types.InlineKeyboardMarkup(row_width=2)
    item1 = types.InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å –¥–∏–∑–∞–π–Ω üé®", callback_data="–∑–∞–∫–∞–∑–∞—Ç—å_–¥–∏–∑–∞–π–Ω_2", url='https://andreykirillov.art/kontakty/')
    item2 = types.InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–ø–µ—Ä–∞–π—Ç–∏–Ω–≥ üíª", callback_data="–ó–∞–∫–∞–∑–∞—Ç—å_–∫–æ–ø–µ—Ä–∞–π—Ç–∏–Ω–≥_2", url='https://andreykirillov.art/kontakty/')
    item3 = types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é üë®üèª‚Äçüíª", callback_data="–ü–æ–ª—É—á–∏—Ç—å_–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é_2", url='https://andreykirillov.art/kontakty/')
    markup.add(item1, item2)
    markup.add(item3)
    await bot.send_message(chat_id=callback_query.message.chat.id,
                           text="–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç—É –¥–∏–∑–∞–π–Ω–∞, –º–∞–∫–µ—Ç–∞, —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏  –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Å–¥–µ—Å—å  ‚¨áÔ∏è",
                           reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == "–¥–∞_2")
async def process_button9(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, text="–î–∞ ‚úÖ")
    markup = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è üí¨", callback_data="—Å–≤—è–∑—å_1", url='https://andreykirillov.art/kontakty/')
    markup.add(item1)
    await bot.send_message(chat_id=callback_query.message.chat.id,
                           text="–•–æ—Ä–æ—à–æ üëç\n–í–∞—à –±–∏–∑–Ω–µ—Å —Å–∞–π—Ç –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å –æ—Ç 8 000‚ÇΩ üíµ\n–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º ‚¨áÔ∏è",
                           reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == "–¥–∞")
async def process_button10(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, text="–î–∞ ‚úÖ")
    markup = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è üí¨", callback_data="—Å–≤—è–∑—å_2", url='https://andreykirillov.art/kontakty/')
    markup.add(item1)
    await bot.send_message(chat_id=callback_query.message.chat.id,
                           text="–•–æ—Ä–æ—à–æ üëç\n–í–∞—à –ª–µ–Ω–¥–∏–Ω–≥ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å –æ—Ç 6 000‚ÇΩ üíµ\n–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º ‚¨áÔ∏è",
                           reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == "–¥–∞_5")
async def process_button10(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, text="–î–∞ ‚úÖ")
    markup = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è üí¨", callback_data="—Å–≤—è–∑—å_2", url='https://andreykirillov.art/kontakty/')
    markup.add(item1)
    await bot.send_message(chat_id=callback_query.message.chat.id,
                           text="–•–æ—Ä–æ—à–æ üëç\n–í–∞—à –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å –æ—Ç 8 000‚ÇΩ üíµ\n–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º ‚¨áÔ∏è",
                           reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == "—Ä–µ–∫–ª–∞–º–∞")
async def process_button11(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, text="–†–µ–∫–ª–∞–º–∞  üì¢")
    markup = types.InlineKeyboardMarkup(row_width=4)
    item1 = types.InlineKeyboardButton("–£—Å–ª—É–≥–∏ üìã", callback_data="—É—Å–ª—É–≥–∏", url='https://andreykirillov.art/kontakty/')
    item2 = types.InlineKeyboardButton("–¢–æ–≤–∞—Ä—ã üõí", callback_data="—Ç–æ–≤–∞—Ä—ã", url='https://andreykirillov.art/kontakty/')
    item3 = types.InlineKeyboardButton("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ üéü", callback_data="–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", url='https://andreykirillov.art/kontakty/')
    item4 = types.InlineKeyboardButton("–î—Ä—É–≥–æ–µ... üì¶", callback_data="–¥—Ä—É–≥–æ–µ_3", url='https://andreykirillov.art/kontakty/')
    markup.add(item1)
    markup.add(item2)
    markup.add(item3)
    markup.add(item4)
    await bot.send_message(chat_id=callback_query.message.chat.id,
                           text="–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å ? üñº\n–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–∫–∏, –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–∞–π—Ç",
                           reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == "–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ")
async def process_button12(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, text="–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ üìà")
    markup = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton("–î–∞ ‚úÖ", callback_data="–¥–∞_3")
    item2 = types.InlineKeyboardButton("–ù–µ—Ç ‚ùå", callback_data="–Ω–µ—Ç_3")
    markup.add(item1, item2)
    await bot.send_message(chat_id=callback_query.message.chat.id,
                           text="–ü—Ä–æ–≤–æ–¥–∏–ª–∏—Å—å –ª–∏ –Ω–∞ –≤–∞—à–µ–º —Å–∞–π—Ç–µ —Ä–∞–±–æ—Ç—ã\n–ü–æ SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ? üîù",
                           reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == "–¥–∞_3")
async def process_button13(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, text="–î–∞ ‚úÖ")
    markup = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton("–î–∞ ‚úÖ", callback_data="–¥–∞_4")
    item2 = types.InlineKeyboardButton("–ù–µ—Ç ‚ùå", callback_data="–Ω–µ—Ç_4")
    markup.add(item1, item2)
    await bot.send_message(chat_id=callback_query.message.chat.id,
                           text="–ü—Ä–æ–≤–æ–¥–∏—Ç–µ –ª–∏ –≤—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–π –í–∞—à–µ–≥–æ —Å–∞–π—Ç–∞ –≤ –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö ? üë®üèª‚Äçüíª",
                           reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == "–¥–∞_4")
async def process_button14(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, text="–î–∞ ‚úÖ")
    markup = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å üì©", callback_data="–∑–∞–∫–∞–∑–∞—Ç—å", url='https://andreykirillov.art/kontakty/')
    markup.add(item1)
    await bot.send_message(chat_id=callback_query.message.chat.id,
                           text="–î–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∂–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—Ç—É–ª—å—Ç–∞—Ü–∏—é ‚¨áÔ∏è",
                           reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == "–Ω–µ—Ç_4")
async def process_button15(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, text="–ù–µ—Ç ‚ùå")
    markup = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å üì©", callback_data="–∑–∞–∫–∞–∑–∞—Ç—å_2", url='https://andreykirillov.art/kontakty/')
    markup.add(item1)
    await bot.send_message(chat_id=callback_query.message.chat.id,
                           text="–î–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∂–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—Ç—É–ª—å—Ç–∞—Ü–∏—é ‚¨áÔ∏è",
                           reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == "–Ω–µ—Ç_3")
async def process_button16(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, text="–ù–µ—Ç ‚ùå")
    markup = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton("–î–∞ ‚úÖ", callback_data="–¥–∞_4")
    item2 = types.InlineKeyboardButton("–ù–µ—Ç ‚ùå", callback_data="–Ω–µ—Ç_4")
    markup.add(item1, item2)
    await bot.send_message(chat_id=callback_query.message.chat.id,
                           text="–ü—Ä–æ–≤–æ–¥–∏—Ç–µ –ª–∏ –≤—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–π –í–∞—à–µ–≥–æ —Å–∞–π—Ç–∞ –≤ –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö ? üë®üèª‚Äçüíª",
                           reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")
async def process_button17(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, text="–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è üí¨")
    markup = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é üí¨", callback_data="–ø–æ–ª—É—á–∏—Ç—å_–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", url='https://andreykirillov.art/kontakty/')
    markup.add(item1)
    await bot.send_message(chat_id=callback_query.message.chat.id,
                           text="–ü–æ–ª–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å\n–ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è",
                           reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == "–¥–∞_4")
async def process_button18(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, text="–î–∞ ‚úÖ")
    markup = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å üì©", callback_data="–∑–∞–∫–∞–∑–∞—Ç—å", url='https://andreykirillov.art/kontakty/')
    markup.add(item1)
    await bot.send_message(chat_id=callback_query.message.chat.id,
                           text="–î–ª—è –±–æ—Ä–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∂–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—Ç—É–ª—å—Ç–∞—Ü–∏—é ‚¨áÔ∏è",
                           reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç_–º–∞–≥–∞–∑–∏–Ω")
async def process_button19(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, text="–ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ú–∞–≥–∞–∑–∏–Ω üõí")
    markup = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton("–î–∞ ‚úÖ", callback_data="–¥–∞_5")
    item2 = types.InlineKeyboardButton("–ù–µ—Ç ‚ùå", callback_data="–Ω–µ—Ç_5")
    markup.add(item1, item2)

    await bot.send_message(chat_id=callback_query.message.chat.id,
                           text="–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–∏–∑–∞–π–Ω, –º–∞–∫–µ—Ç,  –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç ? üìù",
                           reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == "–Ω–µ—Ç_5")
async def process_button20(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, text="–ù–µ—Ç ‚ùå")
    markup = types.InlineKeyboardMarkup(row_width=2)
    item1 = types.InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å –¥–∏–∑–∞–π–Ω üé®", callback_data="–∑–∞–∫–∞–∑–∞—Ç—å_–¥–∏–∑–∞–π–Ω_3", url='https://andreykirillov.art/kontakty/')
    item2 = types.InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–ø–µ—Ä–∞–π—Ç–∏–Ω–≥ üíª", callback_data="–ó–∞–∫–∞–∑–∞—Ç—å_–∫–æ–ø–µ—Ä–∞–π—Ç–∏–Ω–≥_3", url='https://andreykirillov.art/kontakty/')
    item3 = types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é üë®üèª‚Äçüíª", callback_data="–ü–æ–ª—É—á–∏—Ç—å_–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é_3", url='https://andreykirillov.art/kontakty/')
    markup.add(item1, item2)
    markup.add(item3)
    await bot.send_message(chat_id=callback_query.message.chat.id,
                           text="–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç—É –¥–∏–∑–∞–π–Ω–∞, –º–∞–∫–µ—Ç–∞, —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏  –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Å–¥–µ—Å—å  ‚¨áÔ∏è",
                           reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == "–Ω–µ—Ç_4")
async def process_button21(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, text="–ù–µ—Ç ‚ùå")
    markup = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å üì©", callback_data="–∑–∞–∫–∞–∑–∞—Ç—å_2", url='https://andreykirillov.art/kontakty/')
    markup.add(item1)
    await bot.send_message(chat_id=callback_query.message.chat.id,
                           text="–î–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∂–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—Ç—É–ª—å—Ç–∞—Ü–∏—é ‚¨áÔ∏è",
                           reply_markup=markup)


@dp.callback_query_handler(lambda c: c.data == "–Ω–µ—Ç_3")
async def process_button22(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, text="–ù–µ—Ç ‚ùå")
    markup = types.InlineKeyboardMarkup(row_width=1)
    item1 = types.InlineKeyboardButton("–î–∞ ‚úÖ", callback_data="–¥–∞_4")
    item2 = types.InlineKeyboardButton("–ù–µ—Ç ‚ùå", callback_data="–Ω–µ—Ç_4")
    markup.add(item1, item2)
    await bot.send_message(chat_id=callback_query.message.chat.id,
                           text="–ü—Ä–æ–≤–æ–¥–∏—Ç–µ –ª–∏ –≤—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–π –í–∞—à–µ–≥–æ —Å–∞–π—Ç–∞ –≤ –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö ? üë®üèª‚Äçüíª",
                           reply_markup=markup)


if __name__ == '__main__':
    from aiogram import executor
    loop = asyncio.get_event_loop()
    executor.start_polling(dp, loop=loop, skip_updates=True)
